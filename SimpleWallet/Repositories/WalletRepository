using System;
using System.Collections.Generic;
using System.Data;
using System.Data.SqlClient;
using Microsoft.Extensions.Configuration;
using Model.DBModels;

namespace WalletSystem
{
    public class WalletRepository : IWalletRepository
    {
        private readonly string _connectionString;

        public WalletRepository(IConfiguration configuration)
        {
            _connectionString = configuration.GetConnectionString("DefaultConnection");
        }

        public void RegisterUser(Accounts acct)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("INSERT INTO Users (LoginName, AccountNumber, Password, Balance, RegisterDate) VALUES (@LoginName, @AccountNumber, @Password, @Balance, @RegisterDate)", connection))
                {
                    command.Parameters.AddWithValue("@LoginName", acct.LoginName);
                    command.Parameters.AddWithValue("@AccountNumber", acct.AccountNumber);
                    command.Parameters.AddWithValue("@Password", acct.Password);
                    command.Parameters.AddWithValue("@Balance", acct.Balance);
                    command.Parameters.AddWithValue("@RegisterDate", acct.RegisterDate);

                    command.ExecuteNonQuery();
                }
            }
        }

        public Accounts GetUserByLoginName(string loginName)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("SELECT * FROM Users WHERE LoginName = @LoginName", connection))
                {
                    command.Parameters.AddWithValue("@LoginName", loginName);
                    using (var reader = command.ExecuteReader())
                    {
                        if (reader.Read())
                        {
                            return new Accounts
                            {
                                LoginName = reader.GetString(reader.GetOrdinal("LoginName")),
                                AccountNumber = reader.GetString(reader.GetOrdinal("AccountNumber")),
                                Password = reader.GetString(reader.GetOrdinal("Password")),
                                Balance = reader.GetDecimal(reader.GetOrdinal("Balance")),
                                RegisterDate = reader.GetDateTime(reader.GetOrdinal("RegisterDate"))
                            };
                        }
                    }
                }
            }

            return null;
        }

        public void UpdateUser(Accounts acct)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("UPDATE Users SET Balance = @Balance WHERE AccountNumber = @AccountNumber", connection))
                {
                    command.Parameters.AddWithValue("@Balance", acct.Balance);
                    command.Parameters.AddWithValue("@AccountNumber", acct.AccountNumber);

                    command.ExecuteNonQuery();
                }
            }
        }

        public void AddTransaction(Transactions transaction)
        {
            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("INSERT INTO Transactions (TransactionType, Amount, AccountNumberFrom, AccountNumberTo, DateOfTransaction, EndBalance) VALUES (@TransactionType, @Amount, @AccountNumberFrom, @AccountNumberTo, @DateOfTransaction, @EndBalance)", connection))
                {
                    command.Parameters.AddWithValue("@TransactionType", transaction.TransactionType);
                    command.Parameters.AddWithValue("@Amount", transaction.Amount);
                    command.Parameters.AddWithValue("@AccountNumberFrom", transaction.AccountNumberFrom);
                    command.Parameters.AddWithValue("@AccountNumberTo", transaction.AccountNumberTo);
                    command.Parameters.AddWithValue("@DateOfTransaction", transaction.DateOfTransaction);
                    command.Parameters.AddWithValue("@EndBalance", transaction.EndBalance);

                    command.ExecuteNonQuery();
                }
            }
        }

        public List<Transaction> GetTransactionsByAccountNumber(string accountNumber)
        {
            var transactions = new List<Transaction>();

            using (var connection = new SqlConnection(_connectionString))
            {
                connection.Open();
                using (var command = new SqlCommand("SELECT * FROM Transactions WHERE AccountNumberFrom = @AccountNumber OR AccountNumberTo = @AccountNumber ORDER BY DateOfTransaction DESC", connection))
                {
                    command.Parameters.AddWithValue("@AccountNumber", accountNumber);
                    using (var reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            var transaction = new Transaction
                            {
                                TransactionType = reader.GetString(reader.GetOrdinal("TransactionType")),
                                Amount = reader.GetDecimal(reader.GetOrdinal("Amount")),
                                AccountNumberFrom = reader.GetString(reader.GetOrdinal("AccountNumberFrom")),
                                AccountNumberTo = reader.GetString(reader.GetOrdinal("AccountNumberTo")),
                                DateOfTransaction = reader.GetDateTime(reader.GetOrdinal("DateOfTransaction")),
                                EndBalance = reader.GetDecimal(reader.GetOrdinal("EndBalance"))
                            };

                            transactions.Add(transaction);
                        }
                    }
                }
            }

            return transactions;
        }
    }
}
